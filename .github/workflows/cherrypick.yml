name: Backport Bot

on:
  pull_request:
    types: [closed, labeled]

jobs:
  backport:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyGithub

      - name: Run backport bot
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat << EOF > release_bot.py
          import os
          import subprocess
          from github import Github
          from github.GithubException import GithubException
          
          github_token = os.environ["GITHUB_TOKEN"]
          g = Github(github_token)
          repo = g.get_repo(os.environ["GITHUB_REPOSITORY"])
          
          def backport_commit(pr, commit_sha, target_branch):
              try:
                  commit = repo.get_commit(commit_sha)
                  change_name = commit.commit.message.split('\n')[0]
                  new_branch = f"backport-{commit_sha[:7]}-to-{target_branch}"
          
                  # Add initial comment
                  pr.create_issue_comment(f"Ok, backporting change '{change_name}' to {target_branch} branch. New PR will follow.")
          
                  repo.create_git_ref(ref=f"refs/heads/{new_branch}", sha=repo.get_branch(target_branch).commit.sha)
          
                  # Try to backport (cherry-pick) the commit
                  try:
                      subprocess.run(['git', 'checkout', new_branch], check=True)
                      subprocess.run(['git', 'cherry-pick', commit_sha], check=True)
                      subprocess.run(['git', 'push', 'origin', new_branch], check=True)
                  except subprocess.CalledProcessError:
                      # Backport failed, create a comment on the original PR
                      comment = f"@{pr.user.login} Backport to {target_branch} failed due to conflicts. Please resolve manually:\n\n" \
                                f"1. Checkout the {target_branch} branch\n" \
                                f"2. Create a new branch: `git checkout -b {new_branch}`\n" \
                                f"3. Backport the commit: `git cherry-pick {commit_sha}`\n" \
                                f"4. Resolve conflicts\n" \
                                f"5. Commit changes and push the branch\n" \
                                f"6. Create a pull request from {new_branch} to {target_branch}"
                      pr.create_issue_comment(comment)
                      print(f"Backport to {target_branch} failed. Comment added to PR #{pr.number}")
                      return
          
                  title = f"Backport: {change_name}"
                  body = f"Backporting commit {commit_sha} from main to {target_branch}\n\nOriginal commit message:\n{commit.commit.message}"
                  new_pr = repo.create_pull(title=title, body=body, head=new_branch, base=target_branch)
          
                  new_pr.enable_automerge()
                  pr.create_issue_comment(f"Backport to {target_branch} successful. New PR: #{new_pr.number}")
                  print(f"Created PR #{new_pr.number} for backport to {target_branch}")
              except GithubException as e:
                  print(f"Error during backport to {target_branch}: {e}")
                  pr.create_issue_comment(f"@{pr.user.login} An error occurred while attempting to backport to {target_branch}. Error: {str(e)}")
          
          def process_pull_request(pr_number):
              pr = repo.get_pull(pr_number)
              if pr.merged:
                  labels = [label.name for label in pr.labels]
          
                  if "release/stable" in labels:
                      backport_commit(pr, pr.merge_commit_sha, "stable")
          
                  if "release/beta" in labels:
                      backport_commit(pr, pr.merge_commit_sha, "beta")
          
          if __name__ == "__main__":
              event_name = os.environ["GITHUB_EVENT_NAME"]
              event_path = os.environ["GITHUB_EVENT_PATH"]
          
              with open(event_path, 'r') as f:
                  import json
                  event = json.load(f)
          
              pr_number = event['pull_request']['number']
              process_pull_request(pr_number)
          EOF
          
          python release_bot.py