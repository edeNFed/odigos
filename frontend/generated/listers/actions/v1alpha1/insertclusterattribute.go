/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/keyval-dev/odigos/api/odigos/actions/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InsertClusterAttributeLister helps list InsertClusterAttributes.
// All objects returned here must be treated as read-only.
type InsertClusterAttributeLister interface {
	// List lists all InsertClusterAttributes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InsertClusterAttribute, err error)
	// InsertClusterAttributes returns an object that can list and get InsertClusterAttributes.
	InsertClusterAttributes(namespace string) InsertClusterAttributeNamespaceLister
	InsertClusterAttributeListerExpansion
}

// insertClusterAttributeLister implements the InsertClusterAttributeLister interface.
type insertClusterAttributeLister struct {
	indexer cache.Indexer
}

// NewInsertClusterAttributeLister returns a new InsertClusterAttributeLister.
func NewInsertClusterAttributeLister(indexer cache.Indexer) InsertClusterAttributeLister {
	return &insertClusterAttributeLister{indexer: indexer}
}

// List lists all InsertClusterAttributes in the indexer.
func (s *insertClusterAttributeLister) List(selector labels.Selector) (ret []*v1alpha1.InsertClusterAttribute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InsertClusterAttribute))
	})
	return ret, err
}

// InsertClusterAttributes returns an object that can list and get InsertClusterAttributes.
func (s *insertClusterAttributeLister) InsertClusterAttributes(namespace string) InsertClusterAttributeNamespaceLister {
	return insertClusterAttributeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// InsertClusterAttributeNamespaceLister helps list and get InsertClusterAttributes.
// All objects returned here must be treated as read-only.
type InsertClusterAttributeNamespaceLister interface {
	// List lists all InsertClusterAttributes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.InsertClusterAttribute, err error)
	// Get retrieves the InsertClusterAttribute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.InsertClusterAttribute, error)
	InsertClusterAttributeNamespaceListerExpansion
}

// insertClusterAttributeNamespaceLister implements the InsertClusterAttributeNamespaceLister
// interface.
type insertClusterAttributeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all InsertClusterAttributes in the indexer for a given namespace.
func (s insertClusterAttributeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InsertClusterAttribute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InsertClusterAttribute))
	})
	return ret, err
}

// Get retrieves the InsertClusterAttribute from the indexer for a given namespace and name.
func (s insertClusterAttributeNamespaceLister) Get(name string) (*v1alpha1.InsertClusterAttribute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("insertclusterattribute"), name)
	}
	return obj.(*v1alpha1.InsertClusterAttribute), nil
}
